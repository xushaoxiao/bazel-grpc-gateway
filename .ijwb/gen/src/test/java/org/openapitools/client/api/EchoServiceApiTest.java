/*
 * Echo Service
 * Echo Service API consists of a single service which returns a message.
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProtobufsDynamicMessage;
import org.openapitools.client.model.ProtobufsDynamicMessageUpdate;
import org.openapitools.client.model.ProtobufsSimpleMessage;
import org.openapitools.client.model.RpcStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EchoServiceApi
 */
@Ignore
public class EchoServiceApiTest {

    private final EchoServiceApi api = new EchoServiceApi();

    
    /**
     * Echo method receives a simple message and returns it.
     *
     * The message posted as the id parameter will also be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEchoTest() throws ApiException {
        String id = null;
        String num = null;
        String lineNum = null;
        String lang = null;
        String statusProgress = null;
        String statusNote = null;
        String en = null;
        String noProgress = null;
        String noNote = null;
        ProtobufsSimpleMessage response = api.echoServiceEcho(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote);

        // TODO: test validations
    }
    
    /**
     * Echo method receives a simple message and returns it.
     *
     * The message posted as the id parameter will also be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEcho2Test() throws ApiException {
        String id = null;
        String num = null;
        String lineNum = null;
        String lang = null;
        String statusProgress = null;
        String statusNote = null;
        String en = null;
        String noProgress = null;
        String noNote = null;
        ProtobufsSimpleMessage response = api.echoServiceEcho2(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote);

        // TODO: test validations
    }
    
    /**
     * Echo method receives a simple message and returns it.
     *
     * The message posted as the id parameter will also be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEcho3Test() throws ApiException {
        String id = null;
        String num = null;
        String lang = null;
        String lineNum = null;
        String statusProgress = null;
        String statusNote = null;
        String en = null;
        String noProgress = null;
        String noNote = null;
        ProtobufsSimpleMessage response = api.echoServiceEcho3(id, num, lang, lineNum, statusProgress, statusNote, en, noProgress, noNote);

        // TODO: test validations
    }
    
    /**
     * Echo method receives a simple message and returns it.
     *
     * The message posted as the id parameter will also be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEcho4Test() throws ApiException {
        String id = null;
        String lineNum = null;
        String statusNote = null;
        String num = null;
        String lang = null;
        String statusProgress = null;
        String en = null;
        String noProgress = null;
        ProtobufsSimpleMessage response = api.echoServiceEcho4(id, lineNum, statusNote, num, lang, statusProgress, en, noProgress);

        // TODO: test validations
    }
    
    /**
     * Echo method receives a simple message and returns it.
     *
     * The message posted as the id parameter will also be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEcho5Test() throws ApiException {
        String noNote = null;
        String id = null;
        String num = null;
        String lineNum = null;
        String lang = null;
        String statusProgress = null;
        String en = null;
        String noProgress = null;
        ProtobufsSimpleMessage response = api.echoServiceEcho5(noNote, id, num, lineNum, lang, statusProgress, en, noProgress);

        // TODO: test validations
    }
    
    /**
     * EchoBody method receives a simple message and returns it.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEchoBodyTest() throws ApiException {
        ProtobufsSimpleMessage body = null;
        ProtobufsSimpleMessage response = api.echoServiceEchoBody(body);

        // TODO: test validations
    }
    
    /**
     * EchoDelete method receives a simple message and returns it.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEchoDeleteTest() throws ApiException {
        String id = null;
        String num = null;
        String lineNum = null;
        String lang = null;
        String statusProgress = null;
        String statusNote = null;
        String en = null;
        String noProgress = null;
        String noNote = null;
        ProtobufsSimpleMessage response = api.echoServiceEchoDelete(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote);

        // TODO: test validations
    }
    
    /**
     * EchoPatch method receives a NonStandardUpdateRequest and returns it.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEchoPatchTest() throws ApiException {
        ProtobufsDynamicMessage body = null;
        String updateMask = null;
        ProtobufsDynamicMessageUpdate response = api.echoServiceEchoPatch(body, updateMask);

        // TODO: test validations
    }
    
    /**
     * EchoUnauthorized method receives a simple message and returns it. It must always return a google.rpc.Code of &#x60;UNAUTHENTICATED&#x60; and a HTTP Status code of 401.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void echoServiceEchoUnauthorizedTest() throws ApiException {
        String id = null;
        String num = null;
        String lineNum = null;
        String lang = null;
        String statusProgress = null;
        String statusNote = null;
        String en = null;
        String noProgress = null;
        String noNote = null;
        ProtobufsSimpleMessage response = api.echoServiceEchoUnauthorized(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote);

        // TODO: test validations
    }
    
}
