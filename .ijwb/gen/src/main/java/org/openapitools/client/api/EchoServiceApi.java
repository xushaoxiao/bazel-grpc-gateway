/*
 * Echo Service
 * Echo Service API consists of a single service which returns a message.
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProtobufsDynamicMessage;
import org.openapitools.client.model.ProtobufsDynamicMessageUpdate;
import org.openapitools.client.model.ProtobufsSimpleMessage;
import org.openapitools.client.model.RpcStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EchoServiceApi {
    private ApiClient localVarApiClient;

    public EchoServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EchoServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for echoServiceEcho
     * @param id Id represents the message identifier. (required)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoCall(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/example/echo/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (num != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num", num));
        }

        if (lineNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineNum", lineNum));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (statusProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.progress", statusProgress));
        }

        if (statusNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.note", statusNote));
        }

        if (en != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("en", en));
        }

        if (noProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.progress", noProgress));
        }

        if (noNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.note", noNote));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEchoValidateBeforeCall(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling echoServiceEcho(Async)");
        }
        

        okhttp3.Call localVarCall = echoServiceEchoCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, _callback);
        return localVarCall;

    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ProtobufsSimpleMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsSimpleMessage echoServiceEcho(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        ApiResponse<ProtobufsSimpleMessage> localVarResp = echoServiceEchoWithHttpInfo(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote);
        return localVarResp.getData();
    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ApiResponse&lt;ProtobufsSimpleMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsSimpleMessage> echoServiceEchoWithHttpInfo(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEchoValidateBeforeCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, null);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Echo method receives a simple message and returns it. (asynchronously)
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoAsync(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback<ProtobufsSimpleMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEchoValidateBeforeCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoServiceEcho2
     * @param id Id represents the message identifier. (required)
     * @param num  (required)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEcho2Call(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/example/echo/{id}/{num}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "num" + "\\}", localVarApiClient.escapeString(num.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lineNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineNum", lineNum));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (statusProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.progress", statusProgress));
        }

        if (statusNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.note", statusNote));
        }

        if (en != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("en", en));
        }

        if (noProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.progress", noProgress));
        }

        if (noNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.note", noNote));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEcho2ValidateBeforeCall(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling echoServiceEcho2(Async)");
        }
        
        // verify the required parameter 'num' is set
        if (num == null) {
            throw new ApiException("Missing the required parameter 'num' when calling echoServiceEcho2(Async)");
        }
        

        okhttp3.Call localVarCall = echoServiceEcho2Call(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, _callback);
        return localVarCall;

    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (required)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ProtobufsSimpleMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsSimpleMessage echoServiceEcho2(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        ApiResponse<ProtobufsSimpleMessage> localVarResp = echoServiceEcho2WithHttpInfo(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote);
        return localVarResp.getData();
    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (required)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ApiResponse&lt;ProtobufsSimpleMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsSimpleMessage> echoServiceEcho2WithHttpInfo(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEcho2ValidateBeforeCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, null);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Echo method receives a simple message and returns it. (asynchronously)
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (required)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEcho2Async(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback<ProtobufsSimpleMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEcho2ValidateBeforeCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoServiceEcho3
     * @param id Id represents the message identifier. (required)
     * @param num  (required)
     * @param lang  (required)
     * @param lineNum  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEcho3Call(String id, String num, String lang, String lineNum, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/example/echo/{id}/{num}/{lang}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "num" + "\\}", localVarApiClient.escapeString(num.toString()))
            .replaceAll("\\{" + "lang" + "\\}", localVarApiClient.escapeString(lang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lineNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineNum", lineNum));
        }

        if (statusProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.progress", statusProgress));
        }

        if (statusNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.note", statusNote));
        }

        if (en != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("en", en));
        }

        if (noProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.progress", noProgress));
        }

        if (noNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.note", noNote));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEcho3ValidateBeforeCall(String id, String num, String lang, String lineNum, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling echoServiceEcho3(Async)");
        }
        
        // verify the required parameter 'num' is set
        if (num == null) {
            throw new ApiException("Missing the required parameter 'num' when calling echoServiceEcho3(Async)");
        }
        
        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling echoServiceEcho3(Async)");
        }
        

        okhttp3.Call localVarCall = echoServiceEcho3Call(id, num, lang, lineNum, statusProgress, statusNote, en, noProgress, noNote, _callback);
        return localVarCall;

    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (required)
     * @param lang  (required)
     * @param lineNum  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ProtobufsSimpleMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsSimpleMessage echoServiceEcho3(String id, String num, String lang, String lineNum, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        ApiResponse<ProtobufsSimpleMessage> localVarResp = echoServiceEcho3WithHttpInfo(id, num, lang, lineNum, statusProgress, statusNote, en, noProgress, noNote);
        return localVarResp.getData();
    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (required)
     * @param lang  (required)
     * @param lineNum  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ApiResponse&lt;ProtobufsSimpleMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsSimpleMessage> echoServiceEcho3WithHttpInfo(String id, String num, String lang, String lineNum, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEcho3ValidateBeforeCall(id, num, lang, lineNum, statusProgress, statusNote, en, noProgress, noNote, null);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Echo method receives a simple message and returns it. (asynchronously)
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param num  (required)
     * @param lang  (required)
     * @param lineNum  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEcho3Async(String id, String num, String lang, String lineNum, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback<ProtobufsSimpleMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEcho3ValidateBeforeCall(id, num, lang, lineNum, statusProgress, statusNote, en, noProgress, noNote, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoServiceEcho4
     * @param id Id represents the message identifier. (required)
     * @param lineNum  (required)
     * @param statusNote  (required)
     * @param num  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEcho4Call(String id, String lineNum, String statusNote, String num, String lang, String statusProgress, String en, String noProgress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/example/echo1/{id}/{lineNum}/{status.note}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "lineNum" + "\\}", localVarApiClient.escapeString(lineNum.toString()))
            .replaceAll("\\{" + "status.note" + "\\}", localVarApiClient.escapeString(statusNote.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (num != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num", num));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (statusProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.progress", statusProgress));
        }

        if (en != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("en", en));
        }

        if (noProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.progress", noProgress));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEcho4ValidateBeforeCall(String id, String lineNum, String statusNote, String num, String lang, String statusProgress, String en, String noProgress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling echoServiceEcho4(Async)");
        }
        
        // verify the required parameter 'lineNum' is set
        if (lineNum == null) {
            throw new ApiException("Missing the required parameter 'lineNum' when calling echoServiceEcho4(Async)");
        }
        
        // verify the required parameter 'statusNote' is set
        if (statusNote == null) {
            throw new ApiException("Missing the required parameter 'statusNote' when calling echoServiceEcho4(Async)");
        }
        

        okhttp3.Call localVarCall = echoServiceEcho4Call(id, lineNum, statusNote, num, lang, statusProgress, en, noProgress, _callback);
        return localVarCall;

    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param lineNum  (required)
     * @param statusNote  (required)
     * @param num  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @return ProtobufsSimpleMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsSimpleMessage echoServiceEcho4(String id, String lineNum, String statusNote, String num, String lang, String statusProgress, String en, String noProgress) throws ApiException {
        ApiResponse<ProtobufsSimpleMessage> localVarResp = echoServiceEcho4WithHttpInfo(id, lineNum, statusNote, num, lang, statusProgress, en, noProgress);
        return localVarResp.getData();
    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param lineNum  (required)
     * @param statusNote  (required)
     * @param num  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @return ApiResponse&lt;ProtobufsSimpleMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsSimpleMessage> echoServiceEcho4WithHttpInfo(String id, String lineNum, String statusNote, String num, String lang, String statusProgress, String en, String noProgress) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEcho4ValidateBeforeCall(id, lineNum, statusNote, num, lang, statusProgress, en, noProgress, null);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Echo method receives a simple message and returns it. (asynchronously)
     * The message posted as the id parameter will also be returned.
     * @param id Id represents the message identifier. (required)
     * @param lineNum  (required)
     * @param statusNote  (required)
     * @param num  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEcho4Async(String id, String lineNum, String statusNote, String num, String lang, String statusProgress, String en, String noProgress, final ApiCallback<ProtobufsSimpleMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEcho4ValidateBeforeCall(id, lineNum, statusNote, num, lang, statusProgress, en, noProgress, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoServiceEcho5
     * @param noNote  (required)
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEcho5Call(String noNote, String id, String num, String lineNum, String lang, String statusProgress, String en, String noProgress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/example/echo2/{no.note}"
            .replaceAll("\\{" + "no.note" + "\\}", localVarApiClient.escapeString(noNote.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (num != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num", num));
        }

        if (lineNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineNum", lineNum));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (statusProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.progress", statusProgress));
        }

        if (en != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("en", en));
        }

        if (noProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.progress", noProgress));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEcho5ValidateBeforeCall(String noNote, String id, String num, String lineNum, String lang, String statusProgress, String en, String noProgress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'noNote' is set
        if (noNote == null) {
            throw new ApiException("Missing the required parameter 'noNote' when calling echoServiceEcho5(Async)");
        }
        

        okhttp3.Call localVarCall = echoServiceEcho5Call(noNote, id, num, lineNum, lang, statusProgress, en, noProgress, _callback);
        return localVarCall;

    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param noNote  (required)
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @return ProtobufsSimpleMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsSimpleMessage echoServiceEcho5(String noNote, String id, String num, String lineNum, String lang, String statusProgress, String en, String noProgress) throws ApiException {
        ApiResponse<ProtobufsSimpleMessage> localVarResp = echoServiceEcho5WithHttpInfo(noNote, id, num, lineNum, lang, statusProgress, en, noProgress);
        return localVarResp.getData();
    }

    /**
     * Echo method receives a simple message and returns it.
     * The message posted as the id parameter will also be returned.
     * @param noNote  (required)
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @return ApiResponse&lt;ProtobufsSimpleMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsSimpleMessage> echoServiceEcho5WithHttpInfo(String noNote, String id, String num, String lineNum, String lang, String statusProgress, String en, String noProgress) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEcho5ValidateBeforeCall(noNote, id, num, lineNum, lang, statusProgress, en, noProgress, null);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Echo method receives a simple message and returns it. (asynchronously)
     * The message posted as the id parameter will also be returned.
     * @param noNote  (required)
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEcho5Async(String noNote, String id, String num, String lineNum, String lang, String statusProgress, String en, String noProgress, final ApiCallback<ProtobufsSimpleMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEcho5ValidateBeforeCall(noNote, id, num, lineNum, lang, statusProgress, en, noProgress, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoServiceEchoBody
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoBodyCall(ProtobufsSimpleMessage body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/example/echo_body";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEchoBodyValidateBeforeCall(ProtobufsSimpleMessage body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling echoServiceEchoBody(Async)");
        }
        

        okhttp3.Call localVarCall = echoServiceEchoBodyCall(body, _callback);
        return localVarCall;

    }

    /**
     * EchoBody method receives a simple message and returns it.
     * 
     * @param body  (required)
     * @return ProtobufsSimpleMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsSimpleMessage echoServiceEchoBody(ProtobufsSimpleMessage body) throws ApiException {
        ApiResponse<ProtobufsSimpleMessage> localVarResp = echoServiceEchoBodyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * EchoBody method receives a simple message and returns it.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;ProtobufsSimpleMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsSimpleMessage> echoServiceEchoBodyWithHttpInfo(ProtobufsSimpleMessage body) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEchoBodyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EchoBody method receives a simple message and returns it. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoBodyAsync(ProtobufsSimpleMessage body, final ApiCallback<ProtobufsSimpleMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEchoBodyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoServiceEchoDelete
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoDeleteCall(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/example/echo_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (num != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num", num));
        }

        if (lineNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineNum", lineNum));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (statusProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.progress", statusProgress));
        }

        if (statusNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.note", statusNote));
        }

        if (en != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("en", en));
        }

        if (noProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.progress", noProgress));
        }

        if (noNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.note", noNote));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEchoDeleteValidateBeforeCall(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = echoServiceEchoDeleteCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, _callback);
        return localVarCall;

    }

    /**
     * EchoDelete method receives a simple message and returns it.
     * 
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ProtobufsSimpleMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsSimpleMessage echoServiceEchoDelete(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        ApiResponse<ProtobufsSimpleMessage> localVarResp = echoServiceEchoDeleteWithHttpInfo(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote);
        return localVarResp.getData();
    }

    /**
     * EchoDelete method receives a simple message and returns it.
     * 
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ApiResponse&lt;ProtobufsSimpleMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsSimpleMessage> echoServiceEchoDeleteWithHttpInfo(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEchoDeleteValidateBeforeCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, null);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EchoDelete method receives a simple message and returns it. (asynchronously)
     * 
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoDeleteAsync(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback<ProtobufsSimpleMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEchoDeleteValidateBeforeCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoServiceEchoPatch
     * @param body  (required)
     * @param updateMask  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoPatchCall(ProtobufsDynamicMessage body, String updateMask, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/example/echo_patch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMask", updateMask));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEchoPatchValidateBeforeCall(ProtobufsDynamicMessage body, String updateMask, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling echoServiceEchoPatch(Async)");
        }
        

        okhttp3.Call localVarCall = echoServiceEchoPatchCall(body, updateMask, _callback);
        return localVarCall;

    }

    /**
     * EchoPatch method receives a NonStandardUpdateRequest and returns it.
     * 
     * @param body  (required)
     * @param updateMask  (optional)
     * @return ProtobufsDynamicMessageUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsDynamicMessageUpdate echoServiceEchoPatch(ProtobufsDynamicMessage body, String updateMask) throws ApiException {
        ApiResponse<ProtobufsDynamicMessageUpdate> localVarResp = echoServiceEchoPatchWithHttpInfo(body, updateMask);
        return localVarResp.getData();
    }

    /**
     * EchoPatch method receives a NonStandardUpdateRequest and returns it.
     * 
     * @param body  (required)
     * @param updateMask  (optional)
     * @return ApiResponse&lt;ProtobufsDynamicMessageUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsDynamicMessageUpdate> echoServiceEchoPatchWithHttpInfo(ProtobufsDynamicMessage body, String updateMask) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEchoPatchValidateBeforeCall(body, updateMask, null);
        Type localVarReturnType = new TypeToken<ProtobufsDynamicMessageUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EchoPatch method receives a NonStandardUpdateRequest and returns it. (asynchronously)
     * 
     * @param body  (required)
     * @param updateMask  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoPatchAsync(ProtobufsDynamicMessage body, String updateMask, final ApiCallback<ProtobufsDynamicMessageUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEchoPatchValidateBeforeCall(body, updateMask, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsDynamicMessageUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoServiceEchoUnauthorized
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoUnauthorizedCall(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/example/echo_unauthorized";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (num != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num", num));
        }

        if (lineNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineNum", lineNum));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (statusProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.progress", statusProgress));
        }

        if (statusNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status.note", statusNote));
        }

        if (en != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("en", en));
        }

        if (noProgress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.progress", noProgress));
        }

        if (noNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no.note", noNote));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoServiceEchoUnauthorizedValidateBeforeCall(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = echoServiceEchoUnauthorizedCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, _callback);
        return localVarCall;

    }

    /**
     * EchoUnauthorized method receives a simple message and returns it. It must always return a google.rpc.Code of &#x60;UNAUTHENTICATED&#x60; and a HTTP Status code of 401.
     * 
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ProtobufsSimpleMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProtobufsSimpleMessage echoServiceEchoUnauthorized(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        ApiResponse<ProtobufsSimpleMessage> localVarResp = echoServiceEchoUnauthorizedWithHttpInfo(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote);
        return localVarResp.getData();
    }

    /**
     * EchoUnauthorized method receives a simple message and returns it. It must always return a google.rpc.Code of &#x60;UNAUTHENTICATED&#x60; and a HTTP Status code of 401.
     * 
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @return ApiResponse&lt;ProtobufsSimpleMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtobufsSimpleMessage> echoServiceEchoUnauthorizedWithHttpInfo(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote) throws ApiException {
        okhttp3.Call localVarCall = echoServiceEchoUnauthorizedValidateBeforeCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, null);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EchoUnauthorized method receives a simple message and returns it. It must always return a google.rpc.Code of &#x60;UNAUTHENTICATED&#x60; and a HTTP Status code of 401. (asynchronously)
     * 
     * @param id Id represents the message identifier. (optional)
     * @param num  (optional)
     * @param lineNum  (optional)
     * @param lang  (optional)
     * @param statusProgress  (optional)
     * @param statusNote  (optional)
     * @param en  (optional)
     * @param noProgress  (optional)
     * @param noNote  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoServiceEchoUnauthorizedAsync(String id, String num, String lineNum, String lang, String statusProgress, String statusNote, String en, String noProgress, String noNote, final ApiCallback<ProtobufsSimpleMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoServiceEchoUnauthorizedValidateBeforeCall(id, num, lineNum, lang, statusProgress, statusNote, en, noProgress, noNote, _callback);
        Type localVarReturnType = new TypeToken<ProtobufsSimpleMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
